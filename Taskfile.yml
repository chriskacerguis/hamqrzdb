version: '3'

vars:
  BIN_DIR: bin
  API_BINARY: hamqrzdb-api
  PROCESS_BINARY: hamqrzdb-process
  CGO_ENABLED: 1
  GOFLAGS: -ldflags="-s -w"

tasks:
  default:
    desc: Build all binaries
    cmds:
      - task: build

  build:
    desc: Build all CLI tools
    deps:
      - build:api
      - build:process
    cmds:
      - echo "‚úÖ Build complete!"
      - task: info

  build:api:
    desc: Build API server
    sources:
      - main.go
    generates:
      - "{{.BIN_DIR}}/{{.API_BINARY}}"
    cmds:
      - echo "üî® Building {{.API_BINARY}}..."
      - mkdir -p {{.BIN_DIR}}
      - CGO_ENABLED={{.CGO_ENABLED}} go build {{.GOFLAGS}} -o {{.BIN_DIR}}/{{.API_BINARY}} main.go
      - echo "‚úì Built {{.BIN_DIR}}/{{.API_BINARY}}"

  build:process:
    desc: Build data processor
    sources:
      - cmd/process/main.go
    generates:
      - "{{.BIN_DIR}}/{{.PROCESS_BINARY}}"
    cmds:
      - echo "üî® Building {{.PROCESS_BINARY}}..."
      - mkdir -p {{.BIN_DIR}}
      - CGO_ENABLED={{.CGO_ENABLED}} go build {{.GOFLAGS}} -o {{.BIN_DIR}}/{{.PROCESS_BINARY}} cmd/process/main.go
      - echo "‚úì Built {{.BIN_DIR}}/{{.PROCESS_BINARY}}"

  info:
    desc: Show binary sizes
    silent: true
    cmds:
      - echo "üìä Binary sizes"
      - ls -lh {{.BIN_DIR}}/
      - echo ""
      - echo "Quick start"
      - echo "   task dev:process -- --full    Download and process FCC data (includes locations)"
      - echo "   task dev:api                  Start API server"
      - echo ""
      - echo "For more commands run 'task --list'"

  clean:
    desc: Remove build artifacts
    cmds:
      - echo "üßπ Cleaning build artifacts..."
      - rm -rf {{.BIN_DIR}}
      - echo "‚úì Clean complete"

  clean:data:
    desc: Remove downloaded FCC data files
    cmds:
      - echo "üßπ Cleaning FCC data files..."
      - rm -f *.dat
      - rm -f l_amat.zip l_am_*.zip
      - rm -rf l_amat/
      - rm -rf temp_uls/
      - echo "‚úì Data files cleaned"

  clean:all:
    desc: Remove build artifacts and data files
    deps:
      - clean
      - clean:data
    cmds:
      - echo "‚úì Complete cleanup done"

  install:
    desc: Install binaries to /usr/local/bin
    deps:
      - build
    cmds:
      - echo "üì¶ Installing binaries to /usr/local/bin..."
      - sudo cp {{.BIN_DIR}}/{{.API_BINARY}} /usr/local/bin/
      - sudo cp {{.BIN_DIR}}/{{.PROCESS_BINARY}} /usr/local/bin/
      - echo "‚úì Installed {{.API_BINARY}} and {{.PROCESS_BINARY}}"

  uninstall:
    desc: Remove binaries from /usr/local/bin
    cmds:
      - echo "üóëÔ∏è  Uninstalling binaries from /usr/local/bin..."
      - sudo rm -f /usr/local/bin/{{.API_BINARY}}
      - sudo rm -f /usr/local/bin/{{.PROCESS_BINARY}}
      - echo "‚úì Uninstalled"

  test:
    desc: Run tests
    cmds:
      - echo "üß™ Running tests..."
      - go test -v ./...

  deps:
    desc: Download Go dependencies
    cmds:
      - echo "üì¶ Installing Go dependencies..."
      - go mod download
      - echo "‚úì Dependencies installed"

  tidy:
    desc: Tidy Go modules
    cmds:
      - echo "üßπ Tidying Go modules..."
      - go mod tidy
      - echo "‚úì Modules tidied"

  # Development tasks
  dev:api:
    desc: Run API server in development mode
    cmds:
      - echo "üöÄ Starting API server in development mode..."
      - DB_PATH=./hamqrzdb.sqlite PORT=8080 go run main.go

  dev:process:
    desc: Run data processor in development mode
    cmds:
      - echo "üöÄ Running data processor..."
      - go run cmd/process/main.go {{.CLI_ARGS}}

  # Docker tasks
  docker:build:
    desc: Build Docker image
    cmds:
      - echo "üê≥ Building Docker image..."
      - docker build -t hamqrzdb-api:latest .
      - echo "‚úì Docker image built"

  docker:up:
    desc: Start services with Docker Compose
    cmds:
      - echo "üê≥ Starting services with Docker Compose..."
      - docker compose up -d
      - echo "‚úì Services started"

  docker:down:
    desc: Stop services
    cmds:
      - echo "üê≥ Stopping services..."
      - docker compose down
      - echo "‚úì Services stopped"

  docker:logs:
    desc: View service logs
    cmds:
      - docker compose logs -f

  docker:restart:
    desc: Restart services
    cmds:
      - task: docker:down
      - task: docker:up

  # Database tasks
  db:full:
    desc: Download and process full FCC database
    deps:
      - build:process
    cmds:
      - echo "üì° Downloading and processing full FCC database..."
      - ./{{.BIN_DIR}}/{{.PROCESS_BINARY}} --full --db hamqrzdb.sqlite

  db:daily:
    desc: Download and process daily FCC updates
    deps:
      - build:process
    cmds:
      - echo "üì° Downloading and processing daily FCC updates..."
      - ./{{.BIN_DIR}}/{{.PROCESS_BINARY}} --daily --db hamqrzdb.sqlite

  db:stats:
    desc: Show database statistics
    cmds:
      - echo "üìä Database statistics:"
      - sqlite3 hamqrzdb.sqlite "SELECT COUNT(*) FROM callsigns"
      - sqlite3 hamqrzdb.sqlite "SELECT COUNT(*) FROM callsigns WHERE license_status = 'A'"
      - sqlite3 hamqrzdb.sqlite "SELECT COUNT(*) FROM callsigns WHERE latitude IS NOT NULL"
      - sqlite3 hamqrzdb.sqlite "SELECT MAX(last_updated) FROM callsigns"

  # Quick test tasks
  test:build:
    desc: Test that all binaries build successfully
    deps:
      - build
    cmds:
      - echo "‚úÖ All binaries built successfully"
      - task: info

  test:api:
    desc: Test API server (requires running server)
    cmds:
      - echo "üß™ Testing API server..."
      - curl -s http://localhost:8080/health | jq
      - curl -s http://localhost:8080/v1/KJ5DJC/json/test | jq -r '.hamdb.callsign.call + " - " + .hamdb.messages.status'
      - curl -s http://localhost:8080/v1/kj5djc/json/test | jq -r '.hamdb.callsign.call + " - " + .hamdb.messages.status'
      - echo "‚úì API tests complete"

  test:single:
    desc: Test processing a single callsign
    deps:
      - build:process
    cmds:
      - echo "üß™ Testing single callsign processing..."
      - ./{{.BIN_DIR}}/{{.PROCESS_BINARY}} --full --callsign KJ5DJC --db test.db
      - echo "‚úì Single callsign test complete"
      - rm -f test.db test.db-shm test.db-wal

  # Formatting and linting
  fmt:
    desc: Format Go code
    cmds:
      - echo "‚ú® Formatting Go code..."
      - go fmt ./...
      - echo "‚úì Code formatted"

  lint:
    desc: Run linter (requires golangci-lint)
    cmds:
      - echo "üîç Running linter..."
      - golangci-lint run ./...
      - echo "‚úì Linting complete"

  vet:
    desc: Run go vet
    cmds:
      - echo "üîç Running go vet..."
      - go vet ./...
      - echo "‚úì Vet complete"

  check:
    desc: Run all checks (fmt, vet, test)
    cmds:
      - task: fmt
      - task: vet
      - task: test
      - echo "‚úÖ All checks passed"

  # Help and info
  version:
    desc: Show version information
    cmds:
      - echo "HamQRZDB CLI Tools"
      - echo ""
      - echo "Go version:"
      - go version
      - echo ""
      - echo "Binaries:"
      - |
        if [ -f {{.BIN_DIR}}/{{.API_BINARY}} ]; then
          echo "  ‚úì {{.API_BINARY}}"
        else
          echo "  ‚úó {{.API_BINARY}} (not built)"
        fi
      - |
        if [ -f {{.BIN_DIR}}/{{.PROCESS_BINARY}} ]; then
          echo "  ‚úì {{.PROCESS_BINARY}}"
        else
          echo "  ‚úó {{.PROCESS_BINARY}} (not built)"
        fi

  help:
    desc: Show detailed help
    cmds:
      - echo "HamQRZDB - Ham Radio Callsign Lookup System"
      - echo ""
      - echo "Common tasks"
      - echo "  task build              - Build all binaries"
      - echo "  task clean              - Remove build artifacts"
      - echo "  task install            - Install to /usr/local/bin"
      - echo ""
      - echo "Development"
      - echo "  task dev:api            - Run API server"
      - echo "  task dev:process        - Run data processor"
      - echo ""
      - echo "Database"
      - echo "  task db:full            - Download and process full database"
      - echo "  task db:daily           - Download daily updates"
      - echo "  task db:stats           - Show database statistics"
      - echo ""
      - echo "Docker"
      - echo "  task docker:build       - Build Docker image"
      - echo "  task docker:up          - Start services"
      - echo "  task docker:down        - Stop services"
      - echo ""
      - echo "For all available tasks run 'task --list'"
      - echo ""
      - echo "Documentation"
      - echo "  README.md               - Project overview"
      - echo "  docs/README.cli.md      - CLI tools reference"
      - echo "  docs/QUICKREF.md        - Quick reference card"
      - echo "  docs/FCC-DATA-FORMAT.md - FCC file format reference"
      - echo ""
      - echo "73! üìª"
