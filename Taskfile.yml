version: '3'

vars:
  BIN_DIR: bin
  API_BINARY: hamqrzdb-api
  PROCESS_BINARY: hamqrzdb-process
  IMPORT_UK_BINARY: hamqrzdb-import-uk
  CGO_ENABLED: 1
  GOFLAGS: -ldflags="-s -w"

tasks:
  default:
    desc: Build all binaries
    cmds:
      - task: build

  build:
    desc: Build all CLI tools
    deps:
      - build:api
      - build:process
      - build:import-uk
    cmds:
      - echo "‚úÖ Build complete!"
      - task: info

  build:api:
    desc: Build API server
    sources:
      - main.go
    generates:
      - "{{.BIN_DIR}}/{{.API_BINARY}}"
    cmds:
      - echo "üî® Building {{.API_BINARY}}..."
      - mkdir -p {{.BIN_DIR}}
      - CGO_ENABLED={{.CGO_ENABLED}} go build {{.GOFLAGS}} -o {{.BIN_DIR}}/{{.API_BINARY}} main.go
      - echo "‚úì Built {{.BIN_DIR}}/{{.API_BINARY}}"

  build:process:
    desc: Build data processor
    sources:
      - cmd/process/main.go
    generates:
      - "{{.BIN_DIR}}/{{.PROCESS_BINARY}}"
    cmds:
      - echo "üî® Building {{.PROCESS_BINARY}}..."
      - mkdir -p {{.BIN_DIR}}
      - CGO_ENABLED={{.CGO_ENABLED}} go build {{.GOFLAGS}} -o {{.BIN_DIR}}/{{.PROCESS_BINARY}} cmd/process/main.go
      - echo "‚úì Built {{.BIN_DIR}}/{{.PROCESS_BINARY}}"

  build:import-uk:
    desc: Build UK data importer
    sources:
      - cmd/import-uk/main.go
    generates:
      - "{{.BIN_DIR}}/{{.IMPORT_UK_BINARY}}"
    cmds:
      - echo "üî® Building {{.IMPORT_UK_BINARY}}..."
      - mkdir -p {{.BIN_DIR}}
      - CGO_ENABLED={{.CGO_ENABLED}} go build {{.GOFLAGS}} -o {{.BIN_DIR}}/{{.IMPORT_UK_BINARY}} cmd/import-uk/main.go
      - echo "‚úì Built {{.BIN_DIR}}/{{.IMPORT_UK_BINARY}}"

  clean:
    desc: Remove build artifacts
    cmds:
      - echo "üßπ Cleaning build artifacts..."
      - rm -rf {{.BIN_DIR}}
      - echo "‚úì Clean complete"

  clean:data:
    desc: Remove downloaded FCC data files
    cmds:
      - echo "üßπ Cleaning FCC data files..."
      - rm -f *.dat
      - rm -f l_amat.zip l_am_*.zip
      - rm -rf l_amat/
      - rm -rf temp_uls/
      - echo "‚úì Data files cleaned"

  clean:all:
    desc: Remove build artifacts and data files
    deps:
      - clean
      - clean:data
    cmds:
      - echo "‚úì Complete cleanup done"

  install:
    desc: Install binaries to /usr/local/bin
    deps:
      - build
    cmds:
      - echo "üì¶ Installing binaries to /usr/local/bin..."
      - sudo cp {{.BIN_DIR}}/{{.API_BINARY}} /usr/local/bin/
      - sudo cp {{.BIN_DIR}}/{{.PROCESS_BINARY}} /usr/local/bin/
      - sudo cp {{.BIN_DIR}}/{{.IMPORT_UK_BINARY}} /usr/local/bin/
      - echo "‚úì Installed {{.API_BINARY}}, {{.PROCESS_BINARY}}, and {{.IMPORT_UK_BINARY}}"

  uninstall:
    desc: Remove binaries from /usr/local/bin
    cmds:
      - echo "üóëÔ∏è  Uninstalling binaries from /usr/local/bin..."
      - sudo rm -f /usr/local/bin/{{.API_BINARY}}
      - sudo rm -f /usr/local/bin/{{.PROCESS_BINARY}}
      - sudo rm -f /usr/local/bin/{{.IMPORT_UK_BINARY}}
      - echo "‚úì Uninstalled"

  test:
    desc: Run tests
    cmds:
      - echo "üß™ Running tests..."
      - go test -v ./...

  deps:
    desc: Download Go dependencies
    cmds:
      - echo "üì¶ Installing Go dependencies..."
      - go mod download
      - echo "‚úì Dependencies installed"

  tidy:
    desc: Tidy Go modules
    cmds:
      - echo "üßπ Tidying Go modules..."
      - go mod tidy
      - echo "‚úì Modules tidied"

  # Development tasks
  dev:api:
    desc: Run API server in development mode
    cmds:
      - echo "üöÄ Starting API server in development mode..."
      - DB_PATH=./hamqrzdb.sqlite PORT=8080 go run main.go

  dev:process:
    desc: Run data processor in development mode
    cmds:
      - echo "üöÄ Running data processor..."
      - go run cmd/process/main.go {{.CLI_ARGS}}

  dev:import-uk:
    desc: Run UK importer in development mode
    cmds:
      - echo "üöÄ Running UK importer..."
      - go run cmd/import-uk/main.go {{.CLI_ARGS}}

  # Docker tasks
  docker:build:
    desc: Build Docker image
    cmds:
      - echo "üê≥ Building Docker image..."
      - docker build -t ghcr.io/chriskacerguis/hamqrzdb:latest .
      - echo "‚úì Docker image built"

  docker:push:
    desc: Push Docker image to GitHub Container Registry
    deps:
      - docker:build
    cmds:
      - echo "üê≥ Pushing Docker image to GHCR..."
      - docker push ghcr.io/chriskacerguis/hamqrzdb:latest
      - echo "‚úì Docker image pushed"

  docker:up:
    desc: Start services with Docker Compose
    cmds:
      - echo "üê≥ Starting services with Docker Compose..."
      - docker compose up -d
      - echo "‚úì Services started"

  docker:down:
    desc: Stop services
    cmds:
      - echo "üê≥ Stopping services..."
      - docker compose down
      - echo "‚úì Services stopped"

  docker:logs:
    desc: View service logs
    cmds:
      - docker compose logs -f

  docker:restart:
    desc: Restart services
    cmds:
      - task: docker:down
      - task: docker:up

  # Database tasks
  db:full:
    desc: Download and process full FCC database
    deps:
      - build:process
    cmds:
      - echo "üì° Downloading and processing full FCC database..."
      - ./{{.BIN_DIR}}/{{.PROCESS_BINARY}} --full --db hamqrzdb.sqlite

  db:daily:
    desc: Download and process daily FCC updates
    deps:
      - build:process
    cmds:
      - echo "üì° Downloading and processing daily FCC updates..."
      - ./{{.BIN_DIR}}/{{.PROCESS_BINARY}} --daily --db hamqrzdb.sqlite

  db:import-uk:
    desc: Import UK Ofcom amateur radio data
    deps:
      - build:import-uk
    cmds:
      - echo "üá¨üáß Importing UK amateur radio data from Ofcom..."
      - ./{{.BIN_DIR}}/{{.IMPORT_UK_BINARY}} --db hamqrzdb.sqlite

  # Formatting and linting
  fmt:
    desc: Format Go code
    cmds:
      - echo "‚ú® Formatting Go code..."
      - go fmt ./...
      - echo "‚úì Code formatted"

  lint:
    desc: Run linter (requires golangci-lint)
    cmds:
      - echo "üîç Running linter..."
      - golangci-lint run ./...
      - echo "‚úì Linting complete"

  vet:
    desc: Run go vet
    cmds:
      - echo "üîç Running go vet..."
      - go vet ./...
      - echo "‚úì Vet complete"

  check:
    desc: Run all checks (fmt, vet, test)
    cmds:
      - task: fmt
      - task: vet
      - task: test
      - echo "‚úÖ All checks passed"
